















第 ２．００版

平成２３年８月１１日

 

更新履歴
版	更新日	更新者	変更内容	備考
0.10	2004/2/18	佐藤＠TMI	提案リリース	
0.11	2004/3/1	佐藤＠TMI	(1)	「1. はじめに」に、原則禁止の機能を利用する場合に開発標準チーム（基盤チーム／データベースチーム）との検討が必要となる旨を追記。
(2)	「2.3 表名に別名を用いる」に、別名の命名基準を追記。
(3)	「3.6 SQL文発行回数を低減する」に、PL/SQLの原則禁止を追記。
「4.3 JOINする表に制限を設ける」で、「最大3つまで」とあるところに「原則として」という文言を追加。	・三菱電機ISの質問・要望に対する検討結果を反映する。
・(1)として明記した通り、原則を外れる場合は、開発標準チーム経由で、基盤チーム／データベースチーム等適切なチームとの調整を行うこととします。
0.12	2004/3/12	佐藤＠TMI	「3.6 SQL文発行回数を低減する」にて、PL/SQLを原則禁止としていた部分を、条件付きで利用を認める記述に変更。	・野内氏＠凸版の要望に対する検討結果を反映する。
1.00	2004/10/01	菊地＠凸版	(1)	正式版リリース
ドキュメントタイトル変更	
1.01	2004/10/28	佐藤＠全体基盤	(1)	文書全体を『ドキュメント標準雛形』に準拠したフォーマットに変更。
(2)	フォントの種類をMS Pゴシックに統一。
(3)	「生産管理プロジェクト」と表記されていた部分を「BIT-21」に置換。
「3.6 SQL文発行回数を低減する」に、PL/SQLの利用条件を『コーディング規約 PL/SQL版』に転載。	
1.02	2004/11/12	岩崎@全体基盤	4.3　「JOINする表の制限」を「集合演算する表の制限」に変更	
1.03	2004/12/17	甲田@全体基盤	(1)　　｢1. はじめに｣の「(副問い合わせ、ビュー等)」　　　
　　　 と表記されていた部分を削除。
(1)	 3.3　「例外を除き副問い合わせを原則禁止
 とする」を削除。
(2)	　4.4 「UPDATE/DELETE文の条件指定に　　　　　　　　
ROWIDを使用する」を削除。
(4)　　3.5「SQL文発行回数を低減する」を削除
(5)　　5,10「インデックスのキー列のみを問い合わせる場合は高速である」を削除
(6)　各項目がルールか、検討する事なのかを分かりやすい表現に変更
(7)　SQLの例文で「SELECT *　～　」の記述の「*」を具体的な列名に変更
(8)　　5.2「インデックスを使用したくない場合はSQL文でキー列を修飾する」に具体例を追記	
1.04	2005/06/03	岩崎@IT基盤	(1)	オプティマイザーについて明記。
PL/SQL 原則使用禁止。使用の場合の条件については、『コーディング規約　PL/SQL　　版』を参照する旨を再掲。	
1.05	2009/02/10	岩崎@IT基盤	(2)	(1) 4.10として多数のIN/OR記述を回避する旨を追加。	
1.06	2009/02/11	岩崎@IT基盤		(1)　4.10を「IN～」を加筆、修正。	
1.07	2011/7/27	KKA	BIT-21のDBアップグレードに伴い加筆、修正
1-1.アップグレードに伴いコストベースの記述へ変更
3-2.CASE文を追記
3-5.WITH句の使用時の注意を追記
7-5.非推奨のヒント句を追記
8.Oracle11.2.0.1へのアップグレード時に発生したSQLコーディングの仕様変更、不具合を追記	
2.00	2011/8/9
	KKA	(1)  P.1　版数を修正
(2)　更新履歴　版数を修正
(3)　｢BIT21｣と記載されていた箇所を｢BIT-21｣に修正
(4)　Oracleのバージョンを表す11.2、10.1の数字を
   　Oracle11.2、Oracle11.2に修正
(5)　3-2.例示SQL文中の表記を修正
(6)　4-7.表の結合順序と処理性能についての説明を修正
(7)　4-10.ORDEREDの誤字を修正
(8)　7-3.例示SQL文中の表記を修正
(9)　表8-1-1 No 8の文言を修正	
	2011/8/11	KKA浜島	改ページ位置を修正	
				
				

 

 
     目 次                                   
1.	はじめに	7
1-1.	オプティマイザについて	7
1-2.	PL/SQLについて	7
2.	SQL文解析処理軽減に関するガイドライン	8
2-1.	SQL文において大文字/小文字を統一する	8
2-2.	SQLの再利用が期待できる処理にはバインド変数を使用する	9
2-3.	表名に別名を用いる	9
3.	システム負荷軽減に関するガイドライン	10
3-1.	暗黙の型変換をさせない	10
3-2.	DECODE関数、CASE式を使用してSQL文を統合することを検討する	10
3-3.	ビュー使用を禁止する	12
3-4.	ORDER BYには、カラム番号ではなくカラム名を明示的に指定する	12
3-5.	WITH句の使用には注意する	13
4.	テーブルアクセスに関するガイドライン	14
4-1.	テーブルの数行を取り出す場合はテーブルのフルスキャンを避ける	14
4-2.	テーブルの大部分を取り出す場合はテーブルのフルスキャンを使用する	14
4-3.	集合演算する表に制限を設ける	14
4-4.	インデックスのついていない列をWHERE句に指定する場合、効率的な順序を指定することを検討する	15
4-5.	NOT INの代わりにNOT EXISTSを使用する	16
4-6.	レコードの存在チェックではROWNUM=1を使用する	16
4-7.	表の結合順序と処理性能を考慮する	16
4-8.	全件のCOUNT処理はCOUNT(主キー列)で行う	17
4-9.	INを使用する場合は結合文に修正できないかを検討する	17
4-10.	WHERE句に多数の IN、OR、BETWEENを記述しない	18
5.	インデックス使用に関するガイドライン	20
5-1.	インデックスを使用する場合はSQL文でキー列を修飾しない	20
5-2.	インデックスを使用したくない場合はSQL文でキー列を修飾する	21
5-3.	条件指定にNULLを使用するとインデックスが使用されないため極力使用を控える	21
5-4.	条件指定にNOT EQUAL(!=)を使用するとインデックスが使用されないため極力使用を控える	21
5-5.	複合インデックスではキー値の最初の列を指定して検索する	22
5-6.	インデックスのキー列にはDISTINCTを使用しない	22
5-7.	インデックスのキー列にはGROUP BYを使用しない	22
5-8.	インデックスのキー列にはLIKE ‘%c%’を使用しない	22
5-9.	ORDER BYを使用する場合はインデックス使用に条件があることを意識する	23
5-10.	日付型によるインデックス検索の指定の仕方に注意する	23
5-11.	インデックスのキー列にはORを使用しない	24
6.	ソート処理に関するガイドライン	25
6-1.	DISTINCTを使用しないといけない場合はEXISTSで代替することを検討する	25
6-2.	暗黙的にソート処理が走るSQL文を使用しないことを検討する	25
6-3.	重複データが許されるならばUNIONではなくUNION ALL演算子を使用する	26
6-4.	HAVING句ではなくWHERE句による検索条件の絞込みを検討する	26
7.	メンテナンスの容易さを考慮したガイドライン	27
7-1.	挿入列を明示的に指定する	27
7-2.	日付フォーマットを明示的に指定する	27
7-3.	検索時は必要な列のみ選択し、アスタリスク（”*”）の使用を禁止する	28
7-4.	ヒント句の記述方法（参考）	29
7-5.	非推奨のヒント句（参考）	30
8.	Oracle11.2.0.1へのアップグレード時にSQLコーディングに関して発生した仕様変更、不具合	31
 
1.	はじめに

本コーディング規約は、Oracleを用いてシステムを開発する際の、SQL文のコーディングガイドラインを示しています。ここでは特に、性能及びメンテナンス性を考慮しています。
また、BIT-21のOracle11.2へのアップグレード時に発生したSQLコーディングに関する仕様変更、不具合についても、最後に記述しています。




1-1.	オプティマイザについて
SQLの問い合わせ条件、収集されている統計情報などを元に最も効率的な実行計画を決定するオプティマイザは、Oracle10g以降、コストベース・オプティマイザのみサポート（ルールベース・オプティマイザは、未サポート）となっています。コストベース・オプティマイザを使用するには、統計情報を取得する必要があります。（統計情報を取得しないと、適切に新機能が利用されなかったりすることがあります。）Ｏｒａｃｌｅ9i以前を使用する場合は、統計情報を取得せずに、ルールベース・オプティマイザを使用しても構いません。
オプティマイザの生成する実行計画は、SQL記述内容にも深く依存するため、必ず本書のガイドラインに従い、SQL記述を行ってください。
コストベース・オプティマイザでは、SQL記述に依存せず実行計画を生成することもありますが、このガイドラインに従ったSQL記述を行うことを標準とします。

1-2.	PL/SQLについて

PL/SQLは原則禁止とします。使用の場合の条件については、『コーディング規約　PL/SQL　　版』を参照して下さい。

2.	SQL文解析処理軽減に関するガイドライン

ここでは、SQL文実行の際に最初に行われる解析処理を軽減するためのガイドラインを記します。

2-1.	SQL文において大文字/小文字を統一する

オブジェクト名及び変数は半角小文字、それ以外のSQL文は全て半角大文字で記述するといった統一のルールを設けることで、SQL文の再利用性を向上させます。
Oracleは各SQL文を解析する際、共有領域上に同一のSQL文を解析した結果が保持されていた場合には、解析を実行しません。その結果、解析の処理時間を短縮できます。
SQL文の比較はテキストレベルで実施されます。改行位置、スペース有無、大文字･小文字の違いで異なるSQL文と解釈されます。従って、解析処理の低減には書式の統一が求められます。
なお、SQL文が同一であっても、アクセスする表の所有者が異なる場合には同一と見なされません。
表2.1-1 処理結果は同じだがOracleは異なるSQL文と認識する例
SELECT empno FROM emp;
select empno FROM emp;
SELECT empno from emp;
select empno from emp;
SELECT empno  FROM  emp ;
SELECT empno  
FROM  emp ;










 

2-2.	SQLの再利用が期待できる処理にはバインド変数を使用する

バインド変数を利用することで、Oracleはリテラルの異なるSQL文を、同一のものとして認識できます。これにより、SQL文の解析時間が短縮でき、性能向上に貢献します。
また、バインド変数を使用したSQLを利用していると、データベース側でOracle11g機能であるSPM（SQL Plan Management）を利用した実行計画の固定化も可能です。
※SQLの再利用があまり期待できない（動的にSQLが生成され実行されるような処理）・頻度が少ない処理（１日に１度しか実行されないバッチ処理）は、効果も薄いので検討項目として扱って下さい。
表2.2-1 リテラル値指定のSQLとバインド変数使用SQLの例
×	SELECT a.ename FROM emp a WHERE a.empno = 123;
SELECT a.ename FROM emp a WHERE a.empno = 987;
○	SELECT a.ename FROM emp a WHERE a.empno = :B1;

2-3.	表名に別名を用いる

複数のテーブルが、SQL問い合わせ文中に含まれる場合、全カラム名にテーブル別名を明示的に付けます。これにより、カラムの定義が明確になり、さらに、SQL文の解析時間が短縮されます。
開発者にとっても、SQLでアクセスすべきテーブルが明確に記述されるので、コーディングミスを最小限に防ぎ、メンテナンス性も向上します。



表2.3-1 表の別名を表名に使用
×	SELECT ename, dname 
FROM emp, dept 
WHERE emp.deptno = dept.deptno AND sal > 1000;
○	SELECT a.ename, b.dname 
FROM emp a, dept b 
WHERE a.deptno = b.deptno AND a.sal > 1000;



3.	システム負荷軽減に関するガイドライン

ここでは、SQL文を実行したときのシステム負荷の観点から、効果的なSQL文を記述するためのガイドラインを記します。
OracleはSQL文が発行される度に、内部的に多くの処理を実行します。文の解析に始まり、インデックスの評価や変数バインド、そして物理的なブロックへのアクセスを行います。つまり、データベースへのアクセス回数を減らすことができれば、これら内部処理に関わるオーバヘッドを低減できます。そのためには、発行するSQL文の低減が求められます。


3-1.	暗黙の型変換をさせない

型変換が必要な場合、Oracleは自動的に型変換処理を実行します。この型変換処理はSQL文の処理性能に影響を与えます。従って、データ型はテーブル定義に沿って明示的に指定します。
バインド変数を使用する際に、アプリケーション開発者はホスト変数の型に十分注意してください。暗黙の型変換が起きるようなホスト変数をプログラム中で割り当てないようにコーディングします。

表3.1-1 数値型と文字列での暗黙の型変換例
×	変換前	SELECT a.ename FROM emp a WHERE a.empno = ’1234’;
	変換後	SELECT a.ename FROM emp a WHERE a.empno = TO_NUMBER( ’1234’ );
○		SELECT a.ename FROM emp a WHERE a.empno = 1234;

3-2.	DECODE関数、CASE式を使用してSQL文を統合することを検討する

複数のSQL文を1つに統合することで、処理時間を短縮できます。下記DECODE関数、CASE式の活用により実現できます。
DECODE( abc, condition1, result1,
                           condition2, result2,
                           condition3, ... ,
                                                default )
abcとconditionに記述された条件が一つずつ比較されます。abcがconditionに等しい場合は対応するresultを、abcがどのconditionにも一致しない場合にはdefaultが返されます。defaultが指定されていない場合はNULLが返されます。
 

CASE
 WHEN abc=condition1 THEN result1,
WHEN abc=condition2 THEN result2
…
ELSE default
END
abcとconditionに記述された条件が一つずつ比較されます。abcがconditionに等しい場合は対応するresultを、abcがどのconditionにも一致しない場合にはdefaultが返されます。defaultが指定されていない場合はNULLが返されます。

表3.2-1 DECODE関数、CASE式を使用したSQL文の統合例
×	UPDATE emp SET sal = sal * 1.2 WHERE deptno = 10;
	UPDATE emp SET sal = sal * 0.9 WHERE deptno = 20;
○	UPDATE emp SET sal = DECODE( deptno, 10, sal*1.2,
20, sal * 0.9,
sal )
○	UPDATE emp SET sal = (CASE 
WHEN deptno=10 THEN sal*1.2
WHEN deptno=20 THEN sal*0.9
ELSE sal
END )

 

3-3.	ビュー使用を禁止する

ビューは使用用途が明確に設計されていないと、性能に影響する場合があります。設計上の明確な指針がない限り、ビューの実装は原則禁止とします。
また、副問い合わせ中にビューを使用するとOracleの実行計画が複雑となります。その結果、不適切な実行計画が採用される可能性が高くなります。これを避けるため、副問い合わせ中のビューの使用は原則として禁止します。

表3.4-1 副問い合わせ中にビューを使用している例と修正SQL
CREATE VIEW emp_view 
AS SELECT a.ename, a.sal*12 salary FROM emp a WHERE a.deptno < 120;
×	SELECT a.dept_no, b.ename 
FROM dept a, 
( SELECT c.ename FROM emp_view c WHERE c.salary < 3000000 ) b 
WHERE a.dept_no = b.dept_no;
○	SELECT a.dept_no, b.ename 
FROM   dept a, 
( SELECT ename FROM emp WHERE salary < ( 3000000 / 12 ) AND deptno < 120 ) b 
WHERE  a.dept_no = b.dept_no;


3-4.	ORDER BYには、カラム番号ではなくカラム名を明示的に指定する

ORDER BY句では、SELECT句のカラム番号を指定できます。しかし、カラム番号と列との対応づけ処理の為に、内部処理として負荷が発生しますし、SELECT対象列が変わると、ORDER　BY句も修正する必要が発生します。このため、ORDER BY句では、対象カラムを明示的に指定することとします。

表3.5-1 ORDER BY列の明示的指定
×	SELECT a.emp_no , a.ename , a.sal
FROM emp a 
ORDER BY 2;
○	SELECT a.emp_no , a.ename , a.sal 
FROM emp a 
ORDER BY a.ename;

 

3-5.	WITH句の使用には注意する

WITH句を使用したSQLでは、WITH句で指定したSQLの結果をPGA領域に確保し、PGAの使用制限を越えると、一時表領域を使用します。そのため、WITH句で大量データが対象になると、一時表領域を圧迫します。使用する際は、同じSQLを同時に使用するセッション数なども考慮し、使用を検討する。
4.	テーブルアクセスに関するガイドライン

ここでは、テーブルアクセスに関するガイドラインについて記します。
（コストベース・オプティマイザを使用すると、オプティマイザが条件値や、統計情報などを元にフルスキャンもしくはインデックススキャンの実行計画を選択します。しかし、オプティマイザの選択が適切でない場合もあるため、SQLを記述した後、実行計画を確認し、フルスキャン、インデックススキャンのどちらでアクセスしているか、どの結合方法が選択されているのか、必ず確認するようにします。）

4-1.	テーブルの数行を取り出す場合はテーブルのフルスキャンを避ける
絞込み率の高い処理(表全体の行の15%以下を問い合せる場合)には、インデックスを使用します。処理要件的に必要と判断される場合を除いて、原則は、インデックスアクセスを行うように設計することとします。
また、主キーを含む抽出条件の場合には、主キーの条件を優先的に指定するようにしてください。

4-2.	テーブルの大部分を取り出す場合はテーブルのフルスキャンを使用する
フルスキャンの場合、データファイルから複数のブロックを一度に読み込めます。このような場合、一度に複数ブロックを読み込むことで、IO要求が少なくなり、インデックス走査よりも高速になります。表全体の行の15%より多い行を問合せる場合は、フルスキャンを検討して下さい。なお、インデックスを意図的に使用させないようにする（フルスキャンさせる）には、5.1,5.2を参照下さい。

4-3.	集合演算する表に制限を設ける
SQLの強力な処理に、表の集合演算がありますが、多くのテーブルに対するUNION、MINUS、INTERSECT集合演算子を使用した演算は、適切な処理性能が得られない場合があります。
必要なデータアクセスを適切に設計することで、演算する表の数は押さえられます。



 

4-4.	インデックスのついていない列をWHERE句に指定する場合、効率的な順序を指定することを検討する
WHERE句における条件の指定順序は、インデックスの付いていない列の等号条件を扱う際に、重要な役割を果たします。

表4.4-1 各条件指定におけるSQL文記述方法
条件指定	評価順序	SQL文記述
AND 句	ボトムアップ(ANDリストの最後から順)	絞込みが効くAND句はWHERE句の最後
OR 句	トップダウン(ORリストの最初から順)	絞込みが効くOR句はWHERE句の最初

表4.4-2 ANDリストの条件指定
×	SELECT column_name1, column_name2, … FROM emp
WHERE emp_salary > 50000
AND emp_type = ’MANAGER’
AND emp_sex = ’MALE’;
○	SELECT column_name1, column_name2, … FROM emp
WHERE emp_sex = ’MALE’
AND emp_salary > 50000
AND emp_type = ’MANAGER’;

表4.4-3 ORリストの指定条件
×	SELECT column_name1, column_name2, … FROM emp
WHERE emp_sex = ’MALE’
OR emp_salary > 50000
OR emp_type = ’MANAGER’;
○	SELECT column_name1, column_name2, … FROM emp
WHERE emp_type = ’MANAGER’
OR emp_salary > 50000
OR emp_sex = ’MALE’;

※インデックスが付与されている列がWHERE句に含まれると、ルールベース・オプティマイザの順位表に従い、「オプティマイザ」が使用するインデックスを判断します。
 

4-5.	NOT INの代わりにNOT EXISTSを使用する
副問い合わせ処理においてNOT IN句を用いると、内部的なソート・マージ処理が発生します。パフォーマンス改善のためにはNOT EXISTS句を使用します。
ただし、NOT　EXISTS句でも遅いことがあるので、実行計画、実行統計を確認し、パフォーマンスが期待できる記述にします。

表4.5-1 NOT EXISTS句の使用
×	SELECT …
FROM emp a
WHERE a.deptno NOT IN ( SELECT b.deptno 
FROM dept b
WHERE b.deptname = 'SALES' );
○	SELECT …
FROM emp a
WHERE NOT EXISTS ( SELECT b.deptno
FROM dept b
WHERE a.deptno = b.deptno
AND b.deptname = 'SALES' );

4-6.	レコードの存在チェックではROWNUM=1を使用する

レコードの存在チェックでは、rownum = 1を使用します。rownum = 1を指定すると、一行見つけた時点でSQL文を終了します。従って、高速に実行することができます。
（WHERE条件がない場合や、WHERE条件にインデックスがない場合）

4-7.	表の結合順序と処理性能を考慮する

複数テーブルを結合するSQLをコストベース・オプティマイザで実行すると、オプティマイザが最適な結合順を評価し、実行計画を生成します。
Oracle 9iのルールベース・オプティマイザで実行する場合は、レコード件数の少ないテーブルをFROM句の最後に指定するように記述します。
表4.7-1に、処理性能を考慮した表を結合するSQL文を記します。

表4.7-1 処理性能を考慮した表の結合順序
表	emp表 : 1000件 / dept表 : 10件
SQL文	SELECT a.ename, b.dname
FROM emp a, dept b
WHERE b.deptno = a.deptno AND b.dname = ‘SALES’;
 

4-8.	全件のCOUNT処理はCOUNT(主キー列)で行う

特定のカラムでCOUNT処理を実行すると、nullのレコードがカウントされません。ルールベース・オプティマイザでは、主キー列を持つテーブルの件数を調べるには、COUNT(主キー列)として、テーブルアクセスを排除し、主キーインデックスを使用させるようにします。（一般的にテーブルサイズよりも、インデックスサイズの方が小さいため）
コストベース・オプティマイザでは、COUNT(*)であっても、主キー列が存在すると、主キーインデックスを使用します。

4-9.	INを使用する場合は結合文に修正できないかを検討する

副問い合わせを使用した時、副問い合わせとSQL本文は別のアクセスパスで解析される可能性が高くなります。そのため、副問い合わせを用いないSQL文はアクセスパス選択の自由度が増し、処理性能が向上することが多くなります。

表4.9-1 IN演算子の変換
×	SELECT a.ename      
FROM   emp a
WHERE  a.dept_no IN ( SELECT b.dept_no
           　　         FROM dept b
             　         WHERE b.dept_cat = 'A' );
○	SELECT b.ename      
FROM   dept a, emp b
WHERE  a.dept_no = b.dept_no
AND    b.dept_cat = 'A';

 

4-10.	WHERE句に多数の IN、OR、BETWEENを記述しない

WHERE句に多数の INリスト、OR、BETWEENを使用した場合、指定された条件の数が多いほど性能劣化する可能性が高くなります。過去、1500個のORを記述したところサーバが実質的にダウンした経緯があります。
ORACLEではINリストに指定できる最大数の仕様は1000個です。
INリスト、OR、BETWEENの使用は200以下に抑えることとしますが、可能な限り少ない個数で分割ができないかを検討してください。
(ORACLE技術情報: 11018, 42278, 36064, 89612, 98674)

また、200以下でも性能が確保できない場合は、以下を検討して下さい。（KROWN#98674の詳細情報）

/*+ NO_EXPAND */ ヒントを使用する
ルールベース・オプティマイザの仕様により INリストを多数ｓ記述した場合、SQL 文解析時に非常に大きなOR 拡張を実行し、結果 ORA-4031が発生する場合があります。
NO_EXPAND ヒントはOR 拡張を検討するのを防ぎます。

b) 述部の評価順序を明示的に変更する
USE_NLやORDEREDなどのヒントを使用して評価順序を明示的に変更するように制御する
ことで、述部の評価順序を変更します。
※ANSI結合記述を使用するなどオプティマイザがコストベースを選択し、かつINリストを含むSQLが遅い場合のみ有効です。

c) CPU_COSTING ヒントを指定する
CPU_COSTING ヒントは、SQL 文に関するCPU コスト計算を有効にし、その結果をもとに実行計画を作成するように制御します。
※ANSI結合記述を使用するなどオプティマイザがコストベースを選択し、かつINリストを含むSQLが遅い場合のみ有効です。

d) 別表からのSELECTに書き換える
INリストについては以下のように別表からSELECTをすることで性能が改善します。
 

表4.10-1 INリストの書き換え
×	SELECT col2
FROM test 
WHERE  col1 in (
1,
        2,
         : (省略)
        1000,
        1001)  or
        col1 in (
        1002,
        1003,
         : (省略)
        2001) or
         : (省略、以下OR句を1000回記述)
        ;
○	SELECT col2
FROM test
WHERE
     col1 in ( select col1 from dummy );

5.	インデックス使用に関するガイドライン

ここでは、インデックス使用に関するガイドラインについて記します。各テーブルにどのようなインデックスが付与されているのか事前に確認の上、SQLコーディングをして下さい。インデックスを使用すべきかどうかの判断は「4.1 テーブルの数行を取り出す場合はテーブルのフルスキャンを避ける」	を参照して下さい。
コストベース・オプティマイザを使用している場合、オプティマイザがフルスキャンなどの方が効率的と判断した場合、以降のインデックス利用条件に一致していたとしても、使用せず、フルスキャンになることがあります。

5-1.	インデックスを使用する場合はSQL文でキー列を修飾しない

SQL文において、インデックスのキー列が関数その他により修飾されている場合、インデックスは使用されず、フルスキャンが選択されます。従ってインデックススキャンを行いたい場合はキー列を修飾してはいけません。
どうしても関数を使わざるを得ない場合は、Oracle8iからの機能である”ファンクションインデックス”の適用を考慮します。これは、関数を適用されたカラムへインデックスを作成するものです。ただし関数適用後に固定値を取るものに限られます。

表5.1-1から表5.1-3は、インデックスを使用したSQL文の例です。各表の下線部がインデックスのキー列を表しています。○がインデックスを使用する例で、×は想定しているインデックスを使用しない例です。

表5.1-1 インデックスのキー列を用いた計算例
×	SELECT … FROM emp WHERE sal * 1.1 > 950;
○	SELECT … FROM emp WHERE sal > 950 / 1.1;

表5.1-2 インデックスのキー列を文字列操作対象にした例
×	SELECT … FROM emp WHERE aname || atype = ‘NAMET’;
○	SELECT … FROM emp WHERE aname = ‘NAME’ AND atype = ‘T’;

表5.1-3 インデックスのキー列を関数の引数にした例
×	SELECT … FROM emp WHERE SUBSTR(aname,1,5)=’ANAME’;
○	SELECT … FROM emp WHERE aname LIKE ‘ANAME%’;
 

5-2.	インデックスを使用したくない場合はSQL文でキー列を修飾する

理由があってインデックスを使用したくない場合には、意図的にキー列を修飾します。これにより、インデックスの利用を回避できます。例えば以下のように無意味な文字列で修飾します。
表5.2-1 INDEXを使用させない例
select empno from emp where empno||''=7934;
	
5-3.	条件指定にNULLを使用するとインデックスが使用されないため極力使用を控える

NULLはインデックスに含まれません。従って、条件指定にNULLを用いると、インデックスは使用されずに必ずフルスキャンとなります。

表5.3-1 NULL条件指定の代替
×	… WHERE comm is null
×	… WHERE comm is NOT null
○	… WHERE comm >= 0

5-4.	条件指定にNOT EQUAL(!=)を使用するとインデックスが使用されないため極力使用を控える

NOT EQUAL(!=)を使用すると、インデックススキャンを行いません。

表5.4-1 NOT EQUAL条件指定の代替
×	… WHERE deptno != 0
○	… WHERE deptno > 0

 

5-5.	複合インデックスではキー値の最初の列を指定して検索する

複合インデックスは2つ以上の列を指定できます。この複合インデックスを使用するには、先頭のカラムから間を飛ばさずに指定します。
（Oracle9i新機能であるINDEX SKIP SCANでアクセスすると、先頭列の指定がなくても複合インデックスを使用することがあります。）

表5.5-1 empno, ename, job列の順に指定された複合インデックスの使用例
×	…  WHERE ename = 'MARTIN'
×	…  WHERE ename = 'MARTIN' AND job = 'SALESMAN'
×	…  WHERE empno = 20 AND job = 'SALESMAN'
×	…  WHERE job = 'SALESMAN'
○	…  WHERE empno = 20
○	…  WHERE empno = 20 AND ename = 'MARTIN'
○	…  WHERE empno = 20 AND ename = 'MARTIN' AND job = 'SALESMAN'

5-6.	インデックスのキー列にはDISTINCTを使用しない

DISTINCT句を使用するとインデックスは使用されません。

5-7.	インデックスのキー列にはGROUP BYを使用しない

GROUP BYを使用すると、WHERE句と合わせて使用する以外、インデックスは使用されません。

5-8.	インデックスのキー列にはLIKE ‘%c%’を使用しない

LIKE句において、以下の検索条件ではインデックスが使用されません。
A)	後方一致 : LIKE ’%c’
B)	中間一致 : LIKE ‘%c%’
前方一致(LIKE ‘c%’)は、インデックスが使用されます。
 

5-9.	ORDER BYを使用する場合はインデックス使用に条件があることを意識する

ORDER BYでインデックスを使用するためには、以下2条件を満たす必要があります。
A)	ORDER BY句を構成する全列が同じ順序で1つのインデックスに含まれる
B)	ORDER BY句を構成する全列にNOT NULL制約がある

5-10.	日付型によるインデックス検索の指定の仕方に注意する

日付型によるインデックス検索は以下のように指定する。

表5.10-1 日付型によるインデックス検索の指定
×	SELECT …
FROM emp
WHERE TRUNC( adate ) = TRUNC( SYSDATE );
○	SELECT …
FROM emp
WHERE adate => TRUNC( SYSDATE )
AND adate < TRUNC( SYSDATE ) + 1;

 

5-11.	インデックスのキー列にはORを使用しない

	WHERE句の条件がOR演算子で結合されている場合、そのままではインデックスが使用されません。 OR演算子を含む問合せを、UNION ALL演算子を用いた複合問合せに変換することにより、インデックスを使用できます。
オプティマイザはOR演算子を含む問合せからUNION ALL演算子を用いた複合問合せへの変換を、内部的に行う場合があります。このような変換を強制的に行わせるには、USE_CONCATヒントを用います。

表5.11-1 OR演算子の回避
×	SELECT ename
FROM emp
WHERE empno = 7788
or deptno = 10;
○	SELECT ename
FROM emp
WHERE empno = 7788
UNION ALL
SELECT ename
FROM emp
WHERE deptno= 10;
○	SELECT /*+ USE_CONCAT */ ename
FROM emp
WHERE empno = 7788
or deptno = 10;

6.	ソート処理に関するガイドライン

ここでは、ソート処理に関するガイドラインを記します。

6-1.	DISTINCTを使用しないといけない場合はEXISTSで代替することを検討する
	
1対多関係の表を結合する問合わせは、 DISTINCT修飾子ではなくEXISTSを使用します。これによりソート処理を回避できます。
下記の例では、DEPT表のDEPTNO列とEMP表のDEPTNO列が1対多関係にあります。この時、1本目のSQL文を2本目のSQL文に変換することで高速化できます。

表6.1-1 EXISTS句の代替
×	SELECT DISTINCT a.deptno, a.dname
FROM dept a, emp b
WHERE a.deptno = b.deptno;
○	SELECT a.deptno, a.dname
FROM dept a
WHERE EXISTS(
 SELECT ‘X’
FROM emp b
WHERE a.deptno = b.deptno );

6-2.	暗黙的にソート処理が走るSQL文を使用しないことを検討する

以下のSQL文は、暗黙的にソート処理が走ります。従って、可能ならば他のSQL文で書き換えます。
	DISTINCT
	GROUP BY
	INTERSECT
	MINUS
	UNION
	ORDER BY（ソートを必要としないSQLにORDER　BYが含まれている場合など）
 

6-3.	重複データが許されるならばUNIONではなくUNION ALL演算子を使用する

UNION ALL演算子は、重複データをそのまま返します。この結果、同一レコードをグルーピングする処理が軽減されます。

6-4.	HAVING句ではなくWHERE句による検索条件の絞込みを検討する

HAVING句でGROUP BYによる行の集計結果を絞り込む場合、まず、WHERE句による検索条件の絞り込みを考えます。WHERE句の使用が可能ならば、GROUP BY節によって集計対象となる行を減らすことができます。結果、集計処理の負荷を軽減できます。

表6.4-1 WHERE句による検索条件の検討
×	SELECT region, AVG( loc_size )
FROM location
GROUP BY region 
HAVING region != ‘SYDNEY’
AND region != ‘PERTH’;
○	SELECT region, AVG( loc_size )
FROM location
WHERE region != ‘SYDNEY’
AND region != ‘PERTH’
GROUP BY region;

7.	メンテナンスの容易さを考慮したガイドライン

ここでは、メンテナンスの容易さを考慮したガイドラインについて記します。

7-1.	挿入列を明示的に指定する

対象テーブルの全ての列にデータ挿入する場合は、SQLの文法上、列指定を省略できます。しかし、列の並び順は後工程で変更される可能性があり、さらには列が追加される可能性もあります。従って、全列にデータ挿入する場合でも列を明示的に指定します。

表7.1-1 挿入列を明示的に指定
×	INSERT INTO emp
VALUES (100,’AAA’);
○	INSERT INTO emp
(emp_no,ename)
VALUES (100,’AAA’);

7-2.	日付フォーマットを明示的に指定する

日付フォーマットを明示的に指定しない場合、デフォルトの日付フォーマット(NLS_DATE_FORMAT)が適用されます。仮に、NLS_DATE_FORMATが変更された場合、プログラムが正しく処理されない可能性があります。デフォルトの日付フォーマットに依存しないコードを作成するために、日付フォーマットを明示的に指定して型変換します。

表7.2-1 日付フォーマットを明示的に指定
×	SELECT a.ename, a.hire_date
FROM emp a
WHERE a.hire_date > '19900331';
○	SELECT a.ename, TO_CHAR( a.hire_date, 'YYYYMMDD' )
FROM emp a
WHERE a.hire_date > TO_DATE( '19900331', 'YYYYMMDD' );

 

7-3.	検索時は必要な列のみ選択し、アスタリスク（”*”）の使用を禁止する

レコードの検索時、すべての列を取り出すアスタリスク（”*”）を指定すると、処理時間が増大します。また、列の並び順は物理設計以降に変更される可能性があるため、列の順番に依存したSQL文はバグの原因になります。また、列追加が行われると、アスタリスク指定では、不要な列も検索対象になってしまいます。検索処理を行う場合には不要な列指定は避け、必要な列だけを指定します。特に、レコードが長い場合や列数が多い場合は注意が必要です。

表7.3-1 検索時に必要な列のみ指定
×	SELECT *
FROM emp a
WHERE a.eadrs = '東京都';
○	SELECT a.empno, a.ename 
FROM emp a
WHERE a.eadrs = '東京都';

 

7-4.	ヒント句の記述方法（参考）

ヒント句を記述する際には、SELECT, DELETE, UPDATE, INSERTの各キーワードの後に/*+ ヒント句 */の形式で記述し改行します。これにより、ヒント句とコメント行の見誤り等を防ぎ、保守性を向上させます。
FROM句でテーブル別名が使用されているにも関わらず、ヒント句でテーブル実名を指定すると、ヒント句は無効となるので注意が必要です。また、ルールベース・オプティマイザを使用している場合は、ヒント句を指定するとコストベース・オプティマイザとして動作してしまうので注意が必要です。

表7.4-1 正しいヒント句の文法
×	SELECT --+ INDEX_FFS(a empno_idx)
○	SELECT /*+ INDEX_FFS(a empno_idx) */

表7.4-2 コメントとヒント句の挿入方法
×	SELECT /*+ INDEX_FFS(a empno_idx) */ /* コメント */
×	SELECT /* コメント */ /*+ INDEX_FFS(a empno_idx) */
×	SELECT /*+ INDEX_FFS(a empno_idx) */ empNO , ENAME, ～
○	/* コメント */
SELECT /*+ INDEX_FFS(a empno_idx) */
empno , ename ～

表7.4-3 テーブル別名を使用した時のヒント句の挿入方法
×	SELECT /*+ INDEX_FFS(emp empno_idx) */ empno FROM emp a;
○	SELECT /*+ INDEX_FFS(a empno_idx) */   empno FROM emp a;

 

7-5.	非推奨のヒント句（参考）

Oracle10.1における非推奨、ヒント名称が変わったヒント句となります。
ヒント句	備考
NOPARALLEL	NO_PARALLELに変更
NOPARALLEL_INDEX	NO_PARALLEL_INDEXに変更
NOREWRITE	NO_REWRITEに変更
AND_EQUAL	
HASH_AJ	
MERGE_AJ	
NL_AJ	
HASH_SJ	
MERGE_SJ	
NL_SJ	
EXPAND_GSET_TO_UNION	
ORDERED_PREDICATES	
ROWID	
STAR	

8.	Oracle11.2.0.1へのアップグレード時にSQLコーディングに関して発生した仕様変更、不具合

ここでは、2010年末にBIT-21をOracle9.2.0.5からOracle11.2.0.1へアップグレードした際に発生したSQLコーディングに関する仕様変更、不具合について記します。
上位バージョンにて構文チェックが厳しくなった、仕様変更が行われたことに伴い発生したエラーとなります。
問題の発生するバージョン以外を使用している場合も今後のバージョンアップを考慮し、SQLコーディングを修正する際は、表8.1.-1に該当しないようにします。

表8.1-1 仕様変更、不具合に伴い発生した問題一覧
NO	カテゴリ	KROWN	概要	発生条件	備考
1	仕様	12862	NUMBER型変数に38桁以上の値を設定するとORA-01727が発生	【再現ケース】
CREATE OR REPLACE PROCEDURE pp IS
  a NUMBER(40);
BEGIN
  null;
END
/	OracleのNUMBER型は38桁を越えての精度を保証していない。9.2.0以前のリリースではコンパイルできるが、保証されない
2	仕様	87417	副問合せ部分にorder by句が含まれていて、本体部分にrownum句が使用されたSQL文(delete文、update文)を実行した際にORA-1732が発生	以下の全ての条件を満たした場合に現象が発生
・delete文、もしくは、update文
・副問合せ部分にorder by句が使用されている
・本体のSQL部分にrownum句が使用されている

DELETE FROM(SELECT * FROM test_rownum ORDER BY col2)
WHERE rownum=1;	Bug#3740473の修正により構文チェックが厳密に実施されるようになったために発生
3	仕様		BYPASS_UJVCヒントを使用したVIEWの更新時にORA-1779が発生	BYPASS_UJVCヒントが廃止されたために発生	BYPASS_UJVCヒントは元々スナップショットの内部動作で使用されるものであり、ユーザが明示的に使用することは保証されない
4	仕様		PL/SQL内で同一変数を2回以上宣言するとPLS-371が発生	PL/SQL内部で同一名称の変数を2回宣言していたために発生	エラーとなるのが本来の動作であり、9.2.0環境にてコンパイルできてしまったことが問題
 

5	仕様		GROUP BY句での暗黙的なソート処理が実行されない	10.2.0以降でGROUP BYを使用している	10.2.0以降、GROUP BY処理のアルゴリズムが変更されているために発生。特定の並び順で戻り値を期待する場合は明示的にORDER BY句を使用する必要がある
6	仕様		同名の列を持つ表を ANSI JOIN で結合した際、ORA-918 が発生	次の条件のすべてを満たす場合に発生
・ANSI 準拠の結合を実施している
・結合する表が同一の列名を保持している
・この列名を表名またはエイリアスによる修飾をおこなっていない

SELECT  empno
FROM emp a JOIN emp b on a.empno = b.empno
JOIN emp c on a.empno = c.empno;	KROWN#120366（Bug#5368296）の修正により ANSI JOIN 実行時の列定義の検証がより厳密に実施されるようになったために発生
7	不具合	151809	インライン・ビューを含む SELECT 文実行時に ORA-979 が発生する	インライン・ビューを使用している
インライン・ビューの SELECT リスト、及び GROUP BY 句で TRUNC、もしくは
  ROUND 関数を使用している
TRUNC(ROUND) ファンクションの第 2 引数の記述が、SELECT リストと、GROUP BY 句の指定において、大文字/小文字レベルで異なる	SQL> select * from (
    2    select    TRUNC(HIREDATE,'MM')
    3    from      EMP
    4     group by  TRUNC(HIREDATE,'mm')
    5  );
ヒントやVIEWマージを行わせない隠しパラメータでも回避可能ではあるが、
SQLの記述をSELECTとGROUP BYで同じにすることで回避できるため、記述を統一させる

上記再現SQLで言うと、GROUP BYの'mm'をSELECTリストと同じく'MM'とする
8	仕様	111031	PL/SQLの連結演算子がCHAR型を返さない	マニュアルでは、PL/SQLの連結演算子で連結された値は、CHAR型として扱われると記載されているが、実際はVARCHAR2型として扱われる。
結果、比較条件で意図しない結果が返る	VARCHAR2型として扱われるのは、10.2以降の仕様である
以下のいずれかの方法で対応する
・比較前に連結した値を明示的にCHAR型変数に格納する
・RPAD関数で比較対象の文字列に空白を埋め込み長さを揃える
9	不具合	123821
88058	ANSI 準拠の外部結合を使用したSQLの実行時に ORA-01445 や結果不正が発生	LEFT OUTER JOIN などの ANSI 準拠の外部結合を使用し、外部結合で参照している表の列数が1000前後の列数がある（参照する表に存在する列数の合計）
	11.1以降では修正済
ANSI 準拠の外部結合の代わりに Oracle 書式の外部結合演算子（+）を使用することで回避可能


